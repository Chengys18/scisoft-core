/*-
 * Copyright (c) 2017 Diamond Light Source Ltd.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */


package uk.ac.diamond.scisoft.analysis.processing.operations.saxs;


// Imports from org.eclipse.dawnsci
import org.eclipse.dawnsci.analysis.api.processing.model.OperationModelField;
import org.eclipse.dawnsci.analysis.api.processing.model.AbstractOperationModel;


// @author Tim Snow


public class QErrorsModel extends AbstractOperationModel {
	
	
	// Get the region of interest for where to perform the Guinier analysis
	@OperationModelField(label = "Binning errors", hint = "Calculate the q errors generated by integration binning", fieldPosition = 1)
	private boolean calculateDataBinningErrors = true;
	
	
	// Setting up the getters and setters along the way
	public boolean getCalculateDataBinningErrors() {
		return calculateDataBinningErrors;
	}
	
	
	public void setCalculateDataBinningErrors(boolean calculateDataBinningErrors) {
		firePropertyChange("calculateDataBinningErrors", this.calculateDataBinningErrors, this.calculateDataBinningErrors = calculateDataBinningErrors);
	}
	
	
	// Get the region of interest for where to perform the Guinier analysis
	@OperationModelField(label = "Polychromaticity errors", hint = "Calculate the q errors generated by beam polychromaticity", fieldPosition = 1)
	private boolean calculatePolychromaticityErrors = false;
	
	
	// Setting up the getters and setters along the way
	public boolean getCalculatePolychromaticityErrors() {
		return calculatePolychromaticityErrors;
	}
	
	
	public void setCalculatePolychromaticityErrors(boolean calculatePolychromaticityErrors) {
		firePropertyChange("calculatePolychromaticityErrors", this.calculatePolychromaticityErrors, this.calculatePolychromaticityErrors = calculatePolychromaticityErrors);
	}
	
	
	// Get the region of interest for where to perform the Guinier analysis
	@OperationModelField(label = "Sample Thickness errors", hint = "Calculate the q errors generated by sample thickness", fieldPosition = 1)
	private boolean calculateSampleThicknessErrors = false;
	
	
	// Setting up the getters and setters along the way
	public boolean getCalculateSampleThicknessErrors() {
		return calculateSampleThicknessErrors;
	}
	
	
	public void setCalculateSampleThicknessErrors(boolean calculateSampleThicknessErrors) {
		firePropertyChange("calculateSampleThicknessErrors", this.calculateSampleThicknessErrors, this.calculateSampleThicknessErrors = calculateSampleThicknessErrors);
	}
}