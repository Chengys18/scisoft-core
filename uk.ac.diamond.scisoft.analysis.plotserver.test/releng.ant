<project name="plugin-uk.ac.diamond.scisoft.analysis.plotserver.test" basedir=".">

	<dirname property="plugin.basedir" file="${ant.file}" />
	<pathconvert property="workspace.loc" setonempty="false">
		<regexpmapper from="(.*)_git/.+" to="\1"/>
		<path><pathelement location="${plugin.basedir}" /></path>
	</pathconvert>
	<fail message="ERROR: Could not determine workspace.loc" unless="workspace.loc" />
	<property name="workspace.git.loc" value="${workspace.loc}_git" />
	<import file="${workspace.git.loc}/scisoft-core.git/diamond.releng.tools.dawn/ant-headless/common.ant" />

	<!-- ====================================================================
		   JUnit tests
		 ==================================================================== -->

	<import file="${workspace.git.loc}/scisoft-core.git/diamond.releng.tools.dawn/ant-headless/test-common.ant" />

	<target name="junit-tests" depends="netstat_report, _junit-tests, netstat_report_again" />

	<target name="_junit-tests" depends="set-test-base-DAWN">
		<condition property="plugin-uk.ac.diamond.scisoft.analysis.plotserver.test.junit-tests.maxmemory" value="1280m">
			<os family="windows" />
		</condition>
		<property name="plugin-uk.ac.diamond.scisoft.analysis.plotserver.test.junit-tests.maxmemory" value="1536m" />
		<junit-call description="${ant.project.name} Java JUnit tests" forkmode="perTest" maxmemory="${plugin-uk.ac.diamond.scisoft.analysis.plotserver.test.junit-tests.maxmemory}">
			<!-- forkmode=perTest, since some tests can trigger a JVM out-of-memory crash, whence following tests will erroneously report failure unless in a new JVM -->
			<formatter type="xml" />
			<classpath>
				<pathelement location="${junitjar.loc}" />
				<pathelement location="${jythonjar.loc}"/>
				<pathelement location="${plugin.basedir}/bin" />
				<pathelement location="${workspace.git.loc}/scisoft-core.git/diamond.releng.tools.dawn/logging" />  <!-- to pick up logback-test.xml -->
				<pathelement location="${plugin.host.basedir}/bin" />
				<pathelement location="${workspace.git.loc}/january.git/org.eclipse.january/bin" />
				<pathelement location="${workspace.git.loc}/dawnsci.git/org.eclipse.dawnsci.analysis.api/bin" />
				<pathelement location="${workspace.git.loc}/scisoft-core.git/uk.ac.diamond.scisoft.analysis/bin" />
				<pathelement location="${workspace.git.loc}/scisoft-core.git/uk.ac.diamond.scisoft.analysis/jars/*" />
				<pathelement location="${workspace.git.loc}/dawnsci.git/org.eclipse.dawnsci.analysis.dataset/bin" />
				<pathelement location="${workspace.git.loc}/scisoft-core.git/uk.ac.diamond.scisoft.analysis.xmlrpc/bin" />
				<pathelement location="${workspace.git.loc}/gda-common.git/uk.ac.gda.common/bin" />
				<pathelement location="${workspace.git.loc}/scisoft-cbflib.git/uk.ac.diamond.CBFlib/bin" />
				<pathelement location="${workspace.git.loc}/scisoft-cbflib.git/uk.ac.diamond.CBFlib/jars/*" />
				<pathelement location="${workspace.git.loc}/dawn-hdf.git/hdf.hdf5lib/bin" />
				<pathelement location="${workspace.git.loc}/dawnsci.git/org.eclipse.dawnsci.hdf5/bin" />
				<pathelement location="${workspace.git.loc}/dawnsci.git/org.eclipse.dawnsci.nexus/bin" />
				<path refid="tp.slf4j.path" />  <!-- ensure that required org.slf4j.LoggerFactory appears first in classpath -->
				<path refid="tp.jcl-over-slf4j.path" />  <!-- ensure that matching imp appears first in classpath -->
				<path refid="tp.hamcrest.path" />  <!-- ensure that latest version appears first in classpath -->
				<path refid="tp.path" />  <!-- target platform -->
			</classpath>
			<batchtest todir="@{report.dir}">
				<fileset dir="${plugin.basedir}/src">
					<include name="**/*Test.java" />
					<exclude name="**/*PluginTest.java" />
					<!-- exclude tests that usually fails on Jenkins (org.apache.xmlrpc.XmlRpcException: Failed to read server's response: Connection refused (Connection refused)) -->
					<exclude name="**/AllPyPlotMethodsTest.java" />
					<exclude name="**/SDAPlotterViaRpcTest.java" />
				</fileset>
			</batchtest>
		</junit-call>
	</target>

</project>
